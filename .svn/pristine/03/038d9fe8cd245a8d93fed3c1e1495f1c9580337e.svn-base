using HIS.DAL.DbHelper;
using HIS.Domain.Models.Common;
using HIS.Domain.Models.Module;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HIS.DAL.DAL
{
    public class ModuleDAL : IModuleDAL
    {

        #region Initialization

        Database db;

        public ModuleDAL()
        {
            db = new Database();
        }

        #endregion  

        #region Module

        public List<Module> GetModule(SearchCriteria criteria, out int TotalRecords)
        {
            List<Module> Menus = new List<Module>();
            try
            {

                TotalRecords = 0;

                DataSet ds = new DataSet();

                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_SearchText", Direction = ParameterDirection.Input, Value = criteria.SearchText, Type = DbType.String });
                param.Add(new DbParameter() { Name = "p_Offset", Direction = ParameterDirection.Input, Value = criteria.Offset, Type = DbType.Int32 });
                param.Add(new DbParameter() { Name = "p_PageSize", Direction = ParameterDirection.Input, Value = criteria.PageSize, Type = DbType.Int32 });


                ds = db.LoadDataSetAgainstQuery("pr_GetModule", CommandType.StoredProcedure, ref param);

                if (ds != null && ds.Tables.Count > 0)
                {
                    Menus = ds.Tables[0].AsEnumerable().Select(a => new Module()
                    {
                        ModuleId = Convert.ToInt32(a["iModuleId"]),
                        ModuleName = a["vModuleName"].ToString(),
                        ModuleCode = a["vModuleCode"].ToString() ,
                        IsCore = a["iIsCore"]==DBNull.Value?0:Convert.ToInt32(a["iIsCore"].ToString()),
                        ModulePrice = a["dPrice"]==DBNull.Value?0: Convert.ToDouble(a["dPrice"])

                    }).ToList();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        TotalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalCount"]);
                    }

                }

            }
            catch (Exception ex)
            {

                throw ex;
            }
            return Menus;
        }

        public Module GetModuleById(int id)
        {

            Module module = new Module();
            try
            {

                DataSet ds = new DataSet();

                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_ModuleId", Direction = ParameterDirection.Input, Value = id, Type = DbType.Int32 });


                ds = db.LoadDataSetAgainstQuery("pr_GetModuleById", CommandType.StoredProcedure, ref param);

                if (ds != null && ds.Tables.Count > 0)
                {
                    module = ds.Tables[0].AsEnumerable().Select(a => new Module()
                    {
                        ModuleId = Convert.ToInt32(a["iModuleId"]),
                        ModuleName = a["vModuleName"].ToString(),
                        ModuleCode = a["vModuleCode"].ToString() ,
                        IsCore = a["iIsCore"] == DBNull.Value ? 0 : Convert.ToInt32(a["iIsCore"].ToString()),
                        ModulePrice = a["dPrice"] == DBNull.Value ? 0 : Convert.ToDouble(a["dPrice"])


                    }).FirstOrDefault();
                }

            }
            catch (Exception ex)
            {

                throw ex;
            }
            return module;


        }



        public bool SaveModule(Module module)
        {
            try
            {

                string query = "pr_SaveModule";
                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_ModuleId", Value = module.ModuleId });
                param.Add(new DbParameter() { Name = "p_ModuleName", Value = module.ModuleName });
                param.Add(new DbParameter() { Name = "p_ModuleCode", Value = module.ModuleCode });
                param.Add(new DbParameter() { Name = "p_IsCore", Value = module.IsCore });
                param.Add(new DbParameter() { Name = "p_Price", Value = module.ModulePrice });
                param.Add(new DbParameter() { Name = "p_CreatedUserId", Value = module.CreatedUserId });

                int result = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param);


                return result > 0;

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public int DeleteModuleById(int id)
        {
            int deleted = 0;
            try
            {

                string query = "pr_DeleteModuleById";
                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_Id", Value = id });

                deleted = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param);

            }
            catch (Exception ex)
            {

                throw ex;
            }
            return deleted;
        }

        #endregion  

        #region Module Permission

        public List<ModulePermission> GetModulePermission(SearchCriteria criteria, out int TotalRecords)
        {
            List<ModulePermission> Menus = new List<ModulePermission>();
            try
            {

                TotalRecords = 0;

                DataSet ds = new DataSet();

                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_SearchText", Direction = ParameterDirection.Input, Value = criteria.SearchText, Type = DbType.String });
                param.Add(new DbParameter() { Name = "p_Offset", Direction = ParameterDirection.Input, Value = criteria.Offset, Type = DbType.Int32 });
                param.Add(new DbParameter() { Name = "p_PageSize", Direction = ParameterDirection.Input, Value = criteria.PageSize, Type = DbType.Int32 });


                ds = db.LoadDataSetAgainstQuery("pr_GetModulePermission", CommandType.StoredProcedure, ref param);

                if (ds != null && ds.Tables.Count > 0)
                {
                    Menus = ds.Tables[0].AsEnumerable().Select(a => new ModulePermission()
                    {
                        ModulePermissionId = Convert.ToInt32(a["iModulePermissionId"]),
                        ModulePermissionCode = a["vModulePermissionCode"].ToString(),
                        Desription = a["vDescription"].ToString()  ,
                        ModuleName = a["vModuleName"].ToString()

                    }).ToList();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        TotalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalCount"]);
                    }

                }

            }
            catch (Exception ex)
            {

                throw ex;
            }
            return Menus;
        }

        public ModulePermission GetModulePermissionById(int id)
        {

            ModulePermission modulePermission = new ModulePermission();
            try
            {

                DataSet ds = new DataSet();

                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_ModulePermissionId", Direction = ParameterDirection.Input, Value = id, Type = DbType.Int32 });


                ds = db.LoadDataSetAgainstQuery("pr_GetModulePermissionById", CommandType.StoredProcedure, ref param);

                if (ds != null && ds.Tables.Count > 0)
                {
                    modulePermission = ds.Tables[0].AsEnumerable().Select(a => new ModulePermission()
                    {
                        ModulePermissionId = Convert.ToInt32(a["iModulePermissionId"]),
                        ModulePermissionCode = a["vModulePermissionCode"].ToString(),
                        Desription = a["vDescription"].ToString()

                    }).FirstOrDefault();
                }

            }
            catch (Exception ex)
            {

                throw ex;
            }
            return modulePermission;


        }



        public bool SaveModulePermission(ModulePermission modulePermission)
        {
            try
            {

                string query = "pr_SaveModulePermission";
                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_ModulePermissionId", Value = modulePermission.ModulePermissionId });
                param.Add(new DbParameter() { Name = "p_ModuleId", Value = modulePermission.ModuleId });
                param.Add(new DbParameter() { Name = "p_ModulePermissionCode", Value = modulePermission.ModulePermissionCode });
                param.Add(new DbParameter() { Name = "p_Desription", Value = modulePermission.Desription });
                param.Add(new DbParameter() { Name = "p_CreatedUserId", Value = modulePermission.CreatedUserId });

                int result = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param);


                return result > 0;

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public int DeleteModulePermissionById(int id)
        {
            int deleted = 0;
            try
            {

                string query = "pr_DeleteModulePermissionById";
                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_Id", Value = id });

                deleted = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param);

            }
            catch (Exception ex)
            {

                throw ex;
            }
            return deleted;
        }

        #endregion   

    }

    public interface IModuleDAL
    {
        #region Module

        List<Module> GetModule(SearchCriteria criteria, out int TotalRecords);
        Module GetModuleById(int id);
        int DeleteModuleById(int id);
        bool SaveModule(Module userType);

        #endregion

        #region Module Permission 

        List<ModulePermission> GetModulePermission(SearchCriteria criteria, out int TotalRecords);
        ModulePermission GetModulePermissionById(int id);
        int DeleteModulePermissionById(int id);
        bool SaveModulePermission(ModulePermission modulePermission);

        #endregion
    }
}
