using HIS.DAL.DbHelper;
using HIS.Domain.Models.Common;
using HIS.Domain.Models.User;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HIS.DAL.DAL
{
    public class UserDAL : IUserDAL
    {

        #region Initialization

        Database db;

        public UserDAL()
        {
            db = new Database();
        }

        #endregion


        #region UserType

        public List<UserType> GetUserTypes(SearchCriteria criteria, out int TotalRecords)
        {
            List<UserType> Menus = new List<UserType>();
            TotalRecords = 0;

            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_SearchText", Direction = ParameterDirection.Input, Value = criteria.SearchText, Type = DbType.String });
            param.Add(new DbParameter() { Name = "p_Offset", Direction = ParameterDirection.Input, Value = criteria.Offset, Type = DbType.Int32 });
            param.Add(new DbParameter() { Name = "p_PageSize", Direction = ParameterDirection.Input, Value = criteria.PageSize, Type = DbType.Int32 });


            ds = db.LoadDataSetAgainstQuery("pr_GetUserTypes", CommandType.StoredProcedure, param);

            if (ds != null && ds.Tables.Count > 0)
            {
                Menus = ds.Tables[0].AsEnumerable().Select(a => new UserType()
                {
                    UserTypeId = Convert.ToInt32(a["iUserTypeId"]),
                    UserTypeName = a["vUserTypeName"].ToString()
                   
                }).ToList();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    TotalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalCount"]);
                }
                
            }

            return Menus;
        }
        
        public UserType GetUserTypeById(int id) {

            UserType userType = new UserType();
            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_UserTypeId", Direction = ParameterDirection.Input, Value = id, Type = DbType.Int32 });
         

            ds = db.LoadDataSetAgainstQuery("pr_GetUserTypeById", CommandType.StoredProcedure, param);

            if (ds != null && ds.Tables.Count > 0)
            {
                userType = ds.Tables[0].AsEnumerable().Select(a => new UserType()
                {
                    UserTypeId = Convert.ToInt32(a["iUserTypeId"]),
                    UserTypeName = a["vUserTypeName"].ToString()

                }).FirstOrDefault();
            }
            return userType;


        }



        public bool SaveUserType(UserType userType)
        {
            string query = "pr_SaveUserType";
            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_UserTypeId", Value = userType.UserTypeId });
            param.Add(new DbParameter() { Name = "p_UserTypeName", Value = userType.UserTypeName });
            param.Add(new DbParameter() { Name = "p_CreatedUserId", Value = userType.CreatedUserId });

            int result = db.ExecuteNonQuery(query, CommandType.StoredProcedure, param);


            return result > 0;
        }

        public int DeleteUserTypeById(int id)
        {
            int deleted = 0;

            string query = "pr_DeleteUserTypeById";
            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_Id", Value = id  });

            deleted = db.ExecuteNonQuery(query, CommandType.StoredProcedure, param);

            return deleted;
        }

        #endregion

        #region User
        public int SaveUser(User user)
        {
            int saved = 0;

            try
            {

                string query = "pr_SaveUpdateUser";

                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name= "@p_iUserId", Value = user.UserId, Direction = ParameterDirection.InputOutput });
                param.Add(new DbParameter() { Name = "@p_vUserName", Value = user.UserName });
                param.Add(new DbParameter() { Name = "@p_vEmail", Value = user.Email });
                param.Add(new DbParameter() { Name = "@p_vFirstName", Value = user.FirstName });
                param.Add(new DbParameter() { Name = "@p_vMiddleName", Value = user.MiddleName });
                param.Add(new DbParameter() { Name = "@p_vLastName", Value = user.LastName });
                param.Add(new DbParameter() { Name = "@p_iCountryId", Value = user.CountryId });
                param.Add(new DbParameter() { Name = "@p_iCityId", Value = user.CityId });
                param.Add(new DbParameter() { Name = "@p_iTitleId", Value = user.TitleId});
                param.Add(new DbParameter() { Name = "@p_iGenderId", Value = user.Gender });
                param.Add(new DbParameter() { Name = "@p_vPassword", Value = user.Password });
                param.Add(new DbParameter() { Name = "@p_vFatherHusbandName", Value = user.FatherHusbandName });
                param.Add(new DbParameter() { Name = "@p_bIsFirstTimeLogin", Value = user.FirstTimeLogin });
                param.Add(new DbParameter() { Name = "@p_vAddress", Value = user.Address });
                param.Add(new DbParameter() { Name = "@p_vPhoneNo", Value = user.PhoneNo });
                param.Add(new DbParameter() { Name = "@p_vCNIC", Value = user.CNIC });
                param.Add(new DbParameter() { Name = "@p_vPassportNo", Value = user.PassportNo });
                param.Add(new DbParameter() { Name = "@p_vEmergencyContactNo", Value = user.EmergencyContactNumber });
                param.Add(new DbParameter() { Name = "@p_vEmergencyContactPerson", Value = user.EmergencyContactPerson });
                param.Add(new DbParameter() { Name = "@p_iCreatedUserId", Value = user.CreatedUserId });
                param.Add(new DbParameter() { Name = "@p_iUpdatedUserId", Value = user.UpdateUserId });

                param.Add(new DbParameter() { Name = "@p_vDesignation", Value = user.Designation });
                param.Add(new DbParameter() { Name = "@p_bIsActive", Value = user.IsActive });
                param.Add(new DbParameter() { Name = "@p_iOrganizationId", Value = user.OrganizationId});


                saved = db.ExecuteNonQuery(query, CommandType.StoredProcedure, param);

                if (saved < 1)
                {
                    return 0;
                }

            }
            catch (Exception ex)
            {

                throw ex;
            }

            return user.UserId;
        }
        #endregion
    }

    public interface IUserDAL
    {
        #region UserType

        List<UserType> GetUserTypes(SearchCriteria criteria, out int TotalRecords);
        UserType GetUserTypeById(int id);
        int DeleteUserTypeById(int id);
        bool SaveUserType(UserType userType);

        #endregion

        #region User

        int SaveUser(User user);

        #endregion
    }
}
