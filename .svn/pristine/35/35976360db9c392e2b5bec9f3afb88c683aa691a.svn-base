using HIS.DAL.DbHelper;
using HIS.Domain.Models.Common;
using HIS.Domain.Models.Module;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HIS.DAL.DAL
{
    public class ModuleDAL : IModuleDAL
    {

        #region Initialization

        Database db;

        public ModuleDAL()
        {
            db = new Database();
        }

        #endregion


        #region Module

        public List<Module> GetModule(SearchCriteria criteria, out int TotalRecords)
        {
            List<Module> Menus = new List<Module>();
            TotalRecords = 0;

            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_SearchText", Direction = ParameterDirection.Input, Value = criteria.SearchText, Type = DbType.String });
            param.Add(new DbParameter() { Name = "p_Offset", Direction = ParameterDirection.Input, Value = criteria.Offset, Type = DbType.Int32 });
            param.Add(new DbParameter() { Name = "p_PageSize", Direction = ParameterDirection.Input, Value = criteria.PageSize, Type = DbType.Int32 });


            ds = db.LoadDataSetAgainstQuery("pr_GetModule", CommandType.StoredProcedure, param);

            if (ds != null && ds.Tables.Count > 0)
            {
                Menus = ds.Tables[0].AsEnumerable().Select(a => new Module()
                {
                    ModuleId = Convert.ToInt32(a["iModuleId"]),
                    ModuleName = a["vModuleName"].ToString(),
                    ModuleCode = a["vModuleCode"].ToString()
                   
                }).ToList();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    TotalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalCount"]);
                }
                
            }

            return Menus;
        }
        
        public Module GetModuleById(int id) {

            Module module = new Module();
            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_ModuleId", Direction = ParameterDirection.Input, Value = id, Type = DbType.Int32 });


            ds = db.LoadDataSetAgainstQuery("pr_GetModuleById", CommandType.StoredProcedure, param);

            if (ds != null && ds.Tables.Count > 0)
            {
                module = ds.Tables[0].AsEnumerable().Select(a => new Module()
                {
                    ModuleId = Convert.ToInt32(a["iModuleId"]),
                    ModuleName = a["vModuleName"].ToString(),
                    ModuleCode = a["vModuleCode"].ToString()

                }).FirstOrDefault();
            }
            return module;


        }



        public bool SaveModule(Module module)
        {
            string query = "pr_SaveModule";
            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_ModuleId", Value = module.ModuleId });
            param.Add(new DbParameter() { Name = "p_ModuleName", Value = module.ModuleName });
            param.Add(new DbParameter() { Name = "p_ModuleCode", Value = module.ModuleCode });
            param.Add(new DbParameter() { Name = "p_CreatedUserId", Value = module.CreatedUserId });

            int result = db.ExecuteNonQuery(query, CommandType.StoredProcedure, param);


            return result > 0;
        }

        public int DeleteModuleById(int id)
        {
            int deleted = 0;

            string query = "pr_DeleteModuleById";
            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_Id", Value = id  });

            deleted = db.ExecuteNonQuery(query, CommandType.StoredProcedure, param);

            return deleted;
        }

        #endregion


    }

    public interface IModuleDAL
    {
        #region UserType

        List<Module> GetModule(SearchCriteria criteria, out int TotalRecords);
        Module GetModuleById(int id);
        int DeleteModuleById(int id);
        bool SaveModule(Module userType);

        #endregion
    }
}
