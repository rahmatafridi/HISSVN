using HIS.DAL.DbHelper;
using HIS.Domain.Models.Common;
using HIS.Domain.Models.Role;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HIS.DAL.DAL
{
    public class RoleDAL : IRoleDAL
    {

        #region Initialization

        Database db;

        public RoleDAL()
        {
            db = new Database();
        }

        #endregion


        #region Role

        public List<Role> GetRoles(SearchCriteria criteria, out int TotalRecords)
        {
            List<Role> roles = new List<Role>();
            TotalRecords = 0;

            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_SearchText", Direction = ParameterDirection.Input, Value = criteria.SearchText, Type = DbType.String });
            param.Add(new DbParameter() { Name = "p_Offset", Direction = ParameterDirection.Input, Value = criteria.Offset, Type = DbType.Int32 });
            param.Add(new DbParameter() { Name = "p_PageSize", Direction = ParameterDirection.Input, Value = criteria.PageSize, Type = DbType.Int32 });


            ds = db.LoadDataSetAgainstQuery("pr_GetRoles", CommandType.StoredProcedure, ref param);

            if (ds != null && ds.Tables.Count > 0)
            {
                roles = ds.Tables[0].AsEnumerable().Select(a => new Role()
                {
                    iRoleId = Convert.ToInt32(a["iRoleId"].ToString()),
                    vRoleName = Convert.ToString(a["vRoleName"].ToString()),
                    vRoleDescription = Convert.ToString(a["vRoleDescription"].ToString()),
                    iOrganizationId = Convert.ToInt32(a["iOrganizationId"].ToString()),                       

                }).ToList();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    TotalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalCount"]);
                }
                
            }

            return roles;
        }
        
        public Role GetRoleById(int id) {

            Role Role = new Role();
            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_RoleId", Direction = ParameterDirection.Input, Value = id, Type = DbType.Int32 });
         

            ds = db.LoadDataSetAgainstQuery("pr_GetRoleById", CommandType.StoredProcedure, ref param);

            if (ds != null && ds.Tables.Count > 0)
            {
                Role = ds.Tables[0].AsEnumerable().Select(a => new Role()
                {
                    iRoleId = Convert.ToInt32(a["iRoleId"].ToString()),
                    vRoleName = Convert.ToString(a["vRoleName"].ToString()),
                    vRoleDescription = Convert.ToString(a["vRoleDescription"].ToString()),
                    iOrganizationId = Convert.ToInt32(a["iOrganizationId"].ToString()),

                }).FirstOrDefault();
            }
            return Role;


        }
        
        public bool SaveRole(Role Role)
        {
            string query = "pr_SaveRole";
            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_iRoleId", Type = DbType.Int32, Value = Role.iRoleId, Length = 1000, Direction = ParameterDirection.Input });
            param.Add(new DbParameter() { Name = "p_vRoleName", Type = DbType.String, Value = Role.vRoleName, Length = 1000, Direction = ParameterDirection.Input });
            param.Add(new DbParameter() { Name = "p_vRoleDescription", Type = DbType.String, Value = Role.vRoleDescription, Length = 1000, Direction = ParameterDirection.Input });
            param.Add(new DbParameter() { Name = "p_iOrganizationId", Type = DbType.Int32, Value = Role.iOrganizationId, Length = 1000, Direction = ParameterDirection.Input });
            param.Add(new DbParameter() { Name = "p_iCreatedUserId", Type = DbType.Int32, Value = Role.CreatedUserId, Length = 1000, Direction = ParameterDirection.Input });
            param.Add(new DbParameter() { Name = "p_dCreatedDate", Type = DbType.DateTime, Value = Role.CreatedDate, Length = 1000, Direction = ParameterDirection.Input });
            param.Add(new DbParameter() { Name = "p_iUpdatedUserId", Type = DbType.Int32, Value = Role.UpdateUserId, Length = 1000, Direction = ParameterDirection.Input });
            param.Add(new DbParameter() { Name = "p_dUpdatedDate", Type = DbType.DateTime, Value = Role.UpdateDate, Length = 1000, Direction = ParameterDirection.Input });


            int result = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param);


            return result > 0;
        }

        public int DeleteRoleById(int id)
        {
            int deleted = 0;

            string query = "pr_DeleteRoleById";
            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_Id", Value = id  });
      
            deleted = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param);

            return deleted;
        }

        public bool SaveUserRole(int userId, List<Role> Role)
        {
            bool saved = false;

            string query = "pr_SaveUserRole";

            foreach (Role rol in Role)
            {
                List<DbParameter> param = new List<DbParameter>();
                param.Add(new DbParameter() { Name = "p_RoleId", Value = rol.iRoleId });
                param.Add(new DbParameter() { Name = "p_UserId", Value = userId});
                param.Add(new DbParameter() { Name = "p_CreatedUserId", Value = rol.CreatedUserId });

                saved = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param) > 0;
            }

            

            return saved;
        }

        private bool DeleteUserRoles(int userId)
        {
            string query = "pr_DeleteUserRoles";
            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_UserId", Value = userId });

            int deleted = db.ExecuteNonQuery(query, CommandType.StoredProcedure, ref param);

            return deleted > 0;

        }


        #endregion


    }

    public interface IRoleDAL
    {
        #region RoleType

        List<Role> GetRoles(SearchCriteria criteria, out int TotalRecords);
        Role GetRoleById(int id);
        int DeleteRoleById(int id);
        bool SaveRole(Role Role);
        bool SaveUserRole(int userId , List<Role> Role);

        #endregion
    }
}
