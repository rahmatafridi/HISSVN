using HIS.DAL.DbHelper;
using HIS.Domain.Models.Common;
using HIS.Domain.Models.User;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HIS.DAL.DAL
{
    public class UserDAL : IUserDAL
    {

        #region Initialization

        Database db;

        public UserDAL()
        {
            db = new Database();
        }

        #endregion


        #region UserType

        public List<UserType> GetUserTypes(SearchCriteria criteria, out int TotalRecords)
        {
            List<UserType> Menus = new List<UserType>();
            TotalRecords = 0;

            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_SearchText", Direction = ParameterDirection.Input, Value = criteria.SearchText, Type = DbType.String });
            param.Add(new DbParameter() { Name = "p_Offset", Direction = ParameterDirection.Input, Value = criteria.Offset, Type = DbType.Int32 });
            param.Add(new DbParameter() { Name = "p_PageSize", Direction = ParameterDirection.Input, Value = criteria.PageSize, Type = DbType.Int32 });


            ds = db.LoadDataSetAgainstQuery("pr_GetUserTypes", CommandType.StoredProcedure, param);

            if (ds != null && ds.Tables.Count > 0)
            {
                Menus = ds.Tables[0].AsEnumerable().Select(a => new UserType()
                {
                    UserTypeId = Convert.ToInt32(a["iUserTypeId"]),
                    UserTypeName = a["vUserTypeName"].ToString()
                   
                }).ToList();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    TotalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalCount"]);
                }
                
            }

            return Menus;
        }
        
        public UserType GetUserTypeById(int id) {

            UserType userType = new UserType();
            DataSet ds = new DataSet();

            List<DbParameter> param = new List<DbParameter>();
            param.Add(new DbParameter() { Name = "p_UserTypeId", Direction = ParameterDirection.Input, Value = id, Type = DbType.Int32 });
         

            ds = db.LoadDataSetAgainstQuery("pr_GetUserTypeById", CommandType.StoredProcedure, param);

            if (ds != null && ds.Tables.Count > 0)
            {
                userType = ds.Tables[0].AsEnumerable().Select(a => new UserType()
                {
                    UserTypeId = Convert.ToInt32(a["iUserTypeId"]),
                    UserTypeName = a["vUserTypeName"].ToString()

                }).FirstOrDefault();
            }
            return userType;


        }

        public bool SaveUserType(UserType userType)
        {
            return false;
        }

        #endregion


    }

    public interface IUserDAL
    {
        #region UserType

        List<UserType> GetUserTypes(SearchCriteria criteria, out int TotalRecords);
        UserType GetUserTypeById(int id);

        #endregion
    }
}
